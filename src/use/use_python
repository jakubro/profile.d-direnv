#!/bin/bash
set -eo pipefail

use_python() {

  local version=${1:--} # - to read from .pvmrc
  local root=${2:--}    # - to use pwd

  if [ "$version" = "-" ]; then
    version=""
  fi

  if [ "$root" = "-" ]; then
    root=""
  fi

  if [ -z "$root" ]; then
    root=$PWD
  fi

  pushd "$root" >/dev/null

  version=$(_get_requested_python_version "$version")

  local py

  _activate_pyenv
  py=$(_activate_python "$version")
  _activate_venv "$py"
  _install_python_dependencies

  watch_file pyproject.toml
  watch_file setup.py
  watch_file setup.cfg
  watch_file requirements.txt

  popd >/dev/null

}

_get_requested_python_version() {

  local version=${1:-}

  if [ -n "$version" ]; then
    echo "$version"
    return 0
  fi

  local rc

  if rc=$(find_up .pvmrc); then
    cat "$rc"
    return 0
  fi

  log_error "no .pvmrc file found"
  return 1

}

# pyenv
# --------------------------------------------------------------------------------------------------

_activate_pyenv() {

  if [ -z "$PYENV_ROOT" ]; then
    export PYENV_ROOT=~/.pyenv
  fi

  if [[ $PATH != *"$PYENV_ROOT/bin:"* ]]; then
    export PATH=$PYENV_ROOT/bin:$PATH
  fi

  if ! command -v pyenv &>/dev/null; then
    _install_pyenv
  fi

  eval "$(pyenv init -)"

}

_install_pyenv() {

  log_info "installing pyenv"
  curl -s https://pyenv.run | bash

}

_upgrade_pyenv() {

  log_info "upgrading pyenv"

  local root
  root=$(pyenv root)

  (
    cd "$root"
    git pull 1>/dev/null
  )

}

# python
# --------------------------------------------------------------------------------------------------

_activate_python() {

  local version=$1

  local py

  if ! py=$(_get_python_executable "$version"); then

    _upgrade_pyenv
    _install_python "$version"
    py=$(_get_python_executable "$version")

  fi

  echo "$py"

}

_get_python_executable() {

  local version=$1

  local prefix
  prefix=$(pyenv prefix "$version" 2>/dev/null)

  echo "${prefix}/bin/python"

}

_install_python() {

  local version=$1

  log_info "installing python"
  pyenv install --skip-existing "$version" 1>/dev/null

}

# venv
# --------------------------------------------------------------------------------------------------

_activate_venv() {

  local py=$1

  # activate

  unset PYTHONHOME
  export VIRTUAL_ENV=$PWD/.venv

  local relpath
  relpath=$(user_rel_path "$VIRTUAL_ENV")

  if [ ! -d "$VIRTUAL_ENV" ]; then
    log_info "creating venv in $relpath"
    "$py" -m venv "$VIRTUAL_ENV"
  fi

  PATH=$VIRTUAL_ENV/bin:$PATH
  export PATH

  # verify

  local actual_version
  actual_version=$(python -V)

  local expected_version
  expected_version=$("$py" -V)

  if [ "$actual_version" != "$expected_version" ]; then
    log_warn \
      ".envrc requires ${expected_version}" \
      "but existing virtual environment provides ${actual_version}"
  fi

  # upgrade pip

  pip install \
    --require-virtualenv \
    --no-python-version-warning \
    --upgrade \
    pip \
    1>/dev/null ||
    log_error "failed to upgrade pip in $relpath"

}

# deps
# --------------------------------------------------------------------------------------------------

_install_python_dependencies() {

  if [ -f pyproject.toml ] || [ -f setup.py ] || [ -f setup.cfg ]; then

    __install_python_dependencies project \
      --editable \
      ".[dev]"

  elif [ -f requirements.txt ]; then

    __install_python_dependencies requirements.txt \
      --requirement requirements.txt

  fi

}

__install_python_dependencies() {

  local type=$1
  shift

  log_info "restoring $type dependencies"

  pip install \
    --require-virtualenv \
    --disable-pip-version-check \
    --no-python-version-warning \
    "$@" \
    1>/dev/null ||
    log_error "failed to restore $type dependencies"

  pip freeze --exclude-editable >requirements.txt

}
