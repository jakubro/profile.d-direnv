#!/bin/bash

# Usage: use python [<version>] [--root=<root>] [--upgrade-pip] [--write-requirements]
#
# Examples:
#   use python
#   use python 3.11.5
#   use python --root=./src
#   use python --upgrade-pip
#   use python --write-requirements
use_python() {

  log_debug "use python $*"

  # parse args

  local root=$PWD
  local write_requirements=0
  local upgrade_pip=0

  local args
  if ! args=$(getopt -o r:pw --long root:,upgrade-pip,write-requirements -- "$@"); then
    log_warn "invalid options provided: $*"
  else
    eval set -- "$args"
    while true; do
      case "$1" in

      -r | --root)
        shift
        root=$1
        ;;

      -p | --upgrade-pip)
        upgrade_pip=1
        ;;

      -w | --write-requirements)
        write_requirements=1
        ;;

      --)
        shift
        break
        ;;

      esac
      shift
    done
  fi

  local version=${1:-} # defaults to read from .pvmrc

  # handle

  pushd "$root" >/dev/null || return 1

  watch_file pyproject.toml
  watch_file setup.py
  watch_file setup.cfg

  if [ ! -f pyproject.toml ] && [ ! -f setup.py ]; then
    watch_file requirements.txt
  fi

  _use_python "$version" "$write_requirements" "$upgrade_pip"
  local code=$?

  popd >/dev/null || return 1

  log_debug exit
  return "$code"

}

_use_python() {

  local version=$1
  local write_requirements=$2
  local upgrade_pip=$3
  local py

  version=$(_get_requested_python_version "$version") || return 1

  _activate_pyenv || return 1
  py=$(_activate_python "$version") || return 1
  _activate_venv "$py" "$upgrade_pip" || return 1
  _install_python_dependencies "$write_requirements" || return 0

}

_get_requested_python_version() {

  log_debug "getting requested python version"

  local version=${1:-}

  if [ -n "$version" ]; then

    log_debug "got requested python version"

    echo "$version"
    return 0

  fi

  local rc

  if rc=$(find_up .pvmrc); then

    log_debug "got requested python version"

    cat "$rc" || return 1
    return 0

  fi

  log_error "no .pvmrc file found"
  return 1

}

# pyenv
# --------------------------------------------------------------------------------------------------

_activate_pyenv() {

  log_debug "activating pyenv"

  if [ "$(type -t pyenv)" = "function" ]; then
    log_debug "activated pyenv"
    return 0
  fi

  if [ -z "$PYENV_ROOT" ]; then
    export PYENV_ROOT=~/.pyenv
  fi

  if [[ $PATH != *"$PYENV_ROOT/bin:"* ]]; then
    export PATH=$PYENV_ROOT/bin:$PATH
  fi

  if ! has pyenv; then
    _install_pyenv || return 1
  fi

  local initializer
  initializer=$(pyenv init -) || return 1

  eval "$initializer" || return 1

  log_debug "activated pyenv"

}

_install_pyenv() {

  log_info "installing pyenv"

  curl -s https://pyenv.run | bash || return 1

  log_debug "installed pyenv"

}

_upgrade_pyenv() {

  log_info "upgrading pyenv"

  local root
  root=$(pyenv root) || return 1

  (
    cd "$root" || return 1
    git pull --quiet >/dev/null || return 1
  )

  log_debug "upgraded pyenv"

}

# python
# --------------------------------------------------------------------------------------------------

_activate_python() {

  local version=$1

  log_debug "activating python $1"

  local py

  if ! py=$(_get_python_executable "$version"); then

    _upgrade_pyenv || return 1
    _install_python "$version" || return 1
    py=$(_get_python_executable "$version") || return 1

  fi

  log_debug "activated python $1"
  echo "$py"

}

_get_python_executable() {

  log_debug "getting python executable"

  local version=$1

  local prefix

  if ! prefix=$(pyenv prefix "$version" 2>/dev/null); then
    return 1
  fi

  log_debug "got python executable"
  echo "${prefix}/bin/python"

}

_install_python() {

  local version=$1

  log_info "installing python"

  (

    export PYTHON_CONFIGURE_OPTS="--enable-optimizations --with-lto"
    export PYTHON_CFLAGS="-march=native -mtune=native"

    pyenv install --skip-existing "$version" >/dev/null || return 1

  ) || return 1

  log_info "installed python"

}

# venv
# --------------------------------------------------------------------------------------------------

_activate_venv() {

  local py=$1
  local upgrade_pip=$2

  log_debug "activating venv"

  # activate

  unset PYTHONHOME
  export VIRTUAL_ENV=$PWD/.venv

  local relpath
  relpath=$(user_rel_path "$VIRTUAL_ENV")

  _create_venv "$py" || return 1

  PATH=$VIRTUAL_ENV/bin:$PATH
  export PATH

  log_debug "activated venv"

  # verify

  log_debug "verifying venv"

  local actual_version
  actual_version=$(python -V)

  local expected_version
  expected_version=$("$py" -V)

  if [ "$actual_version" != "$expected_version" ]; then
    log_warn \
      ".envrc requires ${expected_version}" \
      "but existing virtual environment provides ${actual_version}"
  fi

  log_debug "verified venv"

  # upgrade pip

  if [ "$upgrade_pip" = 1 ]; then

    log_debug "upgrading pip"

    _pip_install \
      --upgrade \
      pip \
      >/dev/null ||
      log_error "failed to upgrade pip in $relpath"

    log_debug "upgraded pip"

  fi

}

_create_venv() {

  local py=$1
  local path=${2:-$VIRTUAL_ENV}

  if [ ! -d "$VIRTUAL_ENV" ]; then

    log_debug "creating venv"

    local relpath
    relpath=$(user_rel_path "$path")

    log_info "creating venv in $path"
    "$py" -m venv "$path" || return 1

    log_debug "created venv"

  fi

}

# deps
# --------------------------------------------------------------------------------------------------

_install_python_dependencies() {

  local write_requirements=$1

  if [ -f requirements.txt ]; then

    local actual
    local expected

    actual=$(_pip_freeze | _normalize_python_dependencies)
    expected=$(_normalize_python_dependencies <requirements.txt)

    if [ "$actual" != "$expected" ]; then
      _handle_install_python_dependencies requirements.txt \
        --requirement requirements.txt ||
        return 1
    fi

  elif [ -f pyproject.toml ] || [ -f setup.py ]; then

    _handle_install_python_dependencies project \
      --editable ".[dev]" ||
      return 1

    if [ "$write_requirements" = 1 ]; then
      _handle_write_python_dependencies || return 1
    fi

  fi

}

_handle_install_python_dependencies() {

  local type=$1
  shift

  log_info "restoring $type dependencies"

  _pip_install "$@"
  local code=$?

  if [ "$code" != 0 ]; then
    log_error "failed to restore $type dependencies"
    return 1
  fi

  log_debug "restored $type dependencies"

}

_handle_write_python_dependencies() {

  log_debug "updating requirements.txt"

  _pip_freeze >requirements.txt
  local code=$?

  if [ "$code" != 0 ]; then
    log_error "failed to update requirements.txt"
    return 1
  fi

  log_debug "updated requirements.txt"

}

_pip_install() {

  log_debug "pip install: enter"

  pip install \
    --require-virtualenv \
    --disable-pip-version-check \
    --no-python-version-warning \
    --no-input \
    "$@" \
    >/dev/null

  log_debug "pip install: exit"

}

_pip_freeze() {

  log_debug "pip freeze: enter"

  pip freeze \
    --require-virtualenv \
    --disable-pip-version-check \
    --no-python-version-warning \
    --no-input \
    --exclude-editable \
    --local

  log_debug "pip freeze: exit"

}

_normalize_python_dependencies() {

  cat | tr "[:upper:]" "[:lower:]" | sort -s

}
