#!/bin/bash

use_aws_secret_env() {

  local name=$1
  local overwrite=${2:--} # - to prevent overwriting existing env variables
  local profile=${3:--}   # - to use current aws profile
  local region=${4:--}    # - to use current aws region

  if [ -z "$name" ]; then
    log_error "[env] no aws secret name provided"
    return 1
  fi

  local secret
  secret=$(_get_aws_secret "$name" "$profile" "$region") || return 1

  local keys
  keys=$(jq -cr "keys[]" <<<"$secret") || return 1

  local key
  while IFS= read -r key; do
    if [ -n "$key" ]; then

      if [ -n "${!key}" ] && [ "$overwrite" != "true" ]; then
        continue
      fi

      local val
      val=$(jq -cr ".$key" <<<"$secret") || return 1

      if [ -n "$val" ] && [ "$val" != "null" ]; then

        key=${key^^}
        key=${key// /_}

        export "$key=$val"

      fi
    fi
  done <<<"$keys"

}

_get_aws_secret() {

  local name=$1
  local profile=$2
  local region=$3

  # shellcheck disable=SC2031
  (

    if [ -n "$profile" ] && [ "$profile" != "-" ]; then
      export AWS_PROFILE=$profile
    fi

    if [ -n "$region" ] && [ "$region" != "-" ]; then
      export AWS_REGION=$region
      export AWS_DEFAULT_REGION=$region
    fi

    arn=$(_get_aws_secret_arn "$name") || return 1
    _get_aws_secret_value "$arn" || return 1

  ) || return 1

}

_get_aws_secret_arn() {

  local name=$1

  aws secretsmanager list-secrets \
    --filter Key=name,Values="$name" \
    --max-items 1 \
    --query SecretList[0].ARN \
    --output text || return 1

}

_get_aws_secret_value() {

  local arn=$1

  aws secretsmanager get-secret-value \
    --secret-id "$arn" \
    --query SecretString \
    --output text || return 1

}
