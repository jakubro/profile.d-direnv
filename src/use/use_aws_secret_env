#!/bin/bash

# Usage: use aws_secret_env <name> [--overwrite] [--profile=<profile>] [--region=<region>]
#
# Examples:
#   use aws_secret_env production/mysql
#   use aws_secret_env production/mysql --overwrite
#   use aws_secret_env production/mysql --profile=staging
#   use aws_secret_env production/mysql --region=us-east-1
use_aws_secret_env() {

  log_debug "use aws_secret_env $*"

  # parse args

  local overwrite=0
  local profile=
  local region=

  local args
  if ! args=$(getopt -o o,p:,r: --long overwrite,profile:,region: -- "$@"); then
    log_warn "invalid options provided: $*"
  else
    eval set -- "$args"
    while true; do
      case "$1" in

        -o | --overwrite)
          overwrite=1
          ;;

        -p | --profile)
          shift
          profile=$1
          ;;

        -r | --region)
          shift
          region=$1
          ;;

        --)
          shift
          break
          ;;

      esac
      shift
    done
  fi

  local name=$1

  if [ -z "$name" ]; then
    log_error "no aws secret name provided"
    return 1
  fi

  # handle

  local secret
  secret=$(__aws__get_aws_secret__ "$name" "$profile" "$region") || return 1

  local keys
  keys=$(jq -cr "keys[]" <<<"$secret") || return 1

  local key
  while IFS= read -r key; do
    if [ -n "$key" ]; then

      if [ -n "${!key}" ] && [ "$overwrite" != 1 ]; then
        continue
      fi

      local val
      val=$(jq -cr ".$key" <<<"$secret") || return 1

      if [ -n "$val" ] && [ "$val" != "null" ]; then

        key=${key^^}
        key=${key// /_}

        # bashsupport disable=BP2001
        export "$key=$val"

      fi
    fi
  done <<<"$keys"

  log_debug exit

}

__aws__get_aws_secret__() {

  local name=$1
  local profile=$2
  local region=$3

  (

    if [ -n "$profile" ] && [ "$profile" != "-" ]; then
      export AWS_PROFILE=$profile
    fi

    if [ -n "$region" ] && [ "$region" != "-" ]; then
      export AWS_REGION=$region
      export AWS_DEFAULT_REGION=$region
    fi

    arn=$(__aws__get_aws_secret_arn__ "$name") || return 1
    __aws__get_aws_secret_value__ "$arn" || return 1

  ) || return 1

}

__aws__get_aws_secret_arn__() {

  local name=$1

  aws secretsmanager list-secrets \
    --filter Key=name,Values="$name" \
    --max-items 1 \
    --query SecretList[0].ARN \
    --output text \
    || return 1

}

__aws__get_aws_secret_value__() {

  local arn=$1

  aws secretsmanager get-secret-value \
    --secret-id "$arn" \
    --query SecretString \
    --output text \
    || return 1

}
