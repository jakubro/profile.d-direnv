#!/bin/bash

# Usage: use node [<version>] [--root=<root>]
#
# Examples:
#   use node
#   use node 18
#   use node --root=./src
use_node() {

  # parse args

  local root=$PWD

  local args
  if ! args=$(getopt -o r: --long root: -- "$@"); then
    log_warn "invalid options provided: $*"
  else
    eval set -- "$args"
    while true; do
      case "$1" in

        -r | --root)
          shift
          root=$1
          ;;

        --)
          shift
          break
          ;;

      esac
      shift
    done
  fi

  local version=${1:-} # defaults to read from .nvmrc

  # handle

  pushd "$root" >/dev/null || return 1

  watch_file package.json
  watch_file yarn.lock
  watch_file package-lock.json

  __node__use_node__ "$version"
  local code=$?

  popd >/dev/null || return 1
  return "$code"

}

__node__use_node__() {

  local version=$1

  __node__activate_nvm__ || return 1
  __node__activate_node__ "$version" || return 1
  __node__install_dependencies__ || return 0

}

# nvm
# --------------------------------------------------------------------------------------------------

__node__activate_nvm__() {

  log_debug "activating nvm"

  if has nvm; then
    return 0
  fi

  local nvm_dir=~/.nvm
  local nvm_sh=$nvm_dir/nvm.sh

  if [ ! -f "$nvm_sh" ]; then
    __node__install_nvm__ || return 1
  fi

  if [ -z "$NVM_DIR" ]; then
    export NVM_DIR=$nvm_dir
  fi

  \. "$nvm_sh" || return 1

  log_debug "activated nvm"

}

__node__install_nvm__() {

  log_info "installing nvm"

  curl -s https://raw.githubusercontent.com/nvm-sh/nvm/master/install | /bin/bash || return 1

  log_debug "installed nvm"

}

__node__upgrade_nvm__() {

  log_info "upgrading nvm"

  local root=$NVM_DIR

  (

    cd "$root" || return 1

    # checkout latest version tag

    git fetch --quiet --tags origin || return 1
    hash=$(git rev-list --tags --max-count=1) || return 1
    version=$(git describe --abbrev=0 --tags --match "v[0-9]*" "$hash") || return 1

    git checkout --quiet "$version" || return 1

  ) || return 1

  log_debug "upgraded nvm"

}

# node
# --------------------------------------------------------------------------------------------------

__node__activate_node__() {

  local version=$1

  log_debug "activating node.js"

  nvm use --silent "$version" >/dev/null
  local code=$?

  if [ "$code" = 3 ]; then

    __node__install_node__ "$version" || return 1

  elif [ "$code" != 0 ]; then

    log_error "failed to activate node.js"
    return 1

  fi

  log_debug "activated node.js"

}

__node__install_node__() {

  local version=$1

  log_info "installing node.js"

  # check if there's already a default node.js version
  local default
  default=$(nvm alias default >/dev/null)

  nvm install "$version" >/dev/null || return 1

  nvm exec "$version" \
    npm --silent --no-audit --no-fund \
    install --global \
    npm yarn \
    || return 1

  # nvm makes the first installed version the default one
  if [ -z "$default" ]; then
    nvm unalias default >/dev/null || return 1
  fi

  log_debug "installed node.js"

}

# deps
# --------------------------------------------------------------------------------------------------

__node__install_dependencies__() {

  if [ ! -d node_modules ]; then
    remove_from_cache node .
  fi

  if [ -f package-lock.json ]; then

    if is_fresh node package-lock.json; then
      return 0
    fi

    __node__handle_install_dependencies__ \
      __node__npm_install__ || return 1

    add_to_cache node package-lock.json

  else

    if [ -f yarn.lock ]; then
      if is_fresh node yarn.lock; then
        return 0
      fi
    elif [ -f package.json ]; then
      if is_fresh node package.json; then
        return 0
      fi
    else
      return 0
    fi

    if ! has yarn; then
      __node__npm_install__ --global yarn || return 1
    fi

    __node__handle_install_dependencies__ \
      __node__yarn_install__ || return 1

    if [ -f yarn.lock ]; then
      add_to_cache node yarn.lock
    elif [ -f package.json ]; then
      add_to_cache node package.json
    fi

  fi

}

__node__handle_install_dependencies__() {

  log_info "restoring node.js dependencies"

  "$@"
  local code=$?

  if [ "$code" != 0 ]; then
    log_error "failed to restore node.js dependencies"
    return 1
  fi

  log_debug "restored node.js dependencies"

}

__node__npm_install__() {

  NPM_CONFIG_ENGINE_STRICT=true \
    npm install \
    --silent \
    --no-audit \
    --no-fund \
    "$@" \
    >/dev/null \
    || return 1

}

__node__yarn_install__() {

  NPM_CONFIG_ENGINE_STRICT=true \
    yarn install \
    --silent \
    --non-interactive \
    --no-progress \
    --prefer-offline \
    --no-node-version-check \
    --pure-lockfile \
    "$@" \
    >/dev/null \
    || return 1

}
