#!/bin/bash

# Usage: use dotenv [<file>] [--root=<root>] [--no-overwrite]
#
# Examples:
#   use dotenv .env
#   use dotenv --root=./src
#   use dotenv --no-overwrite
use_dotenv() {

  # parse args

  local root=$PWD
  local overwrite=1

  local args
  if ! args=$(getopt -o r:,n --long root:,no-overwrite -- "$@"); then
    log_warn "invalid options provided: $*"
  else
    eval set -- "$args"
    while true; do
      case "$1" in

        -r | --root)
          shift
          root=$1
          ;;

        -n | --no-overwrite)
          overwrite=0
          ;;

        --)
          shift
          break
          ;;

      esac
      shift
    done
  fi

  local file=${1:-.env}

  # handle

  local prev_env
  prev_env=$(declare -p -x | sed 's/^declare -x/declare -g -x/')

  pushd "$root" >/dev/null || return 1

  __dotenv__pull_dotenv_vault__

  if [ -f "$file" ]; then

    log_debug "loading ${root}/${file}"

    set -o allexport
    \. "$file" || return 1
    set +o allexport

    watch_file "$file"

  fi

  popd >/dev/null || return 1

  if [ "$overwrite" = 0 ]; then
    eval "$prev_env" || return 1
  fi

}

__dotenv__pull_dotenv_vault__() {

  if ! [ -f .env ] && [ -f .env.vault ]; then

    local key

    if [ -n "$DOTENV_KEY" ]; then
      key=$DOTENV_KEY
    elif [ -f .env.key ]; then
      key=$(cat .env.key) || return 1
    else
      log_warn "cannot find decryption key"
    fi

    log_debug "pulling .env.vault into .env"

    if ! has dotenv-vault; then

      npm install \
        --silent \
        --no-audit \
        --no-fund \
        --global \
        dotenv-vault@latest \
        >/dev/null \
        || return 1

    fi

    DOTENV_KEY=$key dotenv-vault pull --yes >/dev/null || return 1

  fi

}
